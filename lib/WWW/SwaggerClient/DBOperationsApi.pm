=begin comment

Switch Database REST API

Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.

OpenAPI spec version: 1.2.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::DBOperationsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# add_post
#
# Add is used for adding a data object to the list created at Switch DB.
# 
# @param string $api_key Your Switch API Key. (required)
# @param string $access_token Your Access Token. (required)
# @param string $list Your data list name. (required)
# @param string $body Your new value JSON. (required)
{
    my $params = {
    'api_key' => {
        data_type => 'string',
        description => 'Your Switch API Key.',
        required => '1',
    },
    'access_token' => {
        data_type => 'string',
        description => 'Your Access Token.',
        required => '1',
    },
    'list' => {
        data_type => 'string',
        description => 'Your data list name.',
        required => '1',
    },
    'body' => {
        data_type => 'string',
        description => 'Your new value JSON.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_post' } = { 
    	summary => 'Add is used for adding a data object to the list created at Switch DB.',
        params => $params,
        returns => 'AddResponse',
        };
}
# @return AddResponse
#
sub add_post {
    my ($self, %args) = @_;

    # verify the required parameter 'api_key' is set
    unless (exists $args{'api_key'}) {
      croak("Missing the required parameter 'api_key' when calling add_post");
    }

    # verify the required parameter 'access_token' is set
    unless (exists $args{'access_token'}) {
      croak("Missing the required parameter 'access_token' when calling add_post");
    }

    # verify the required parameter 'list' is set
    unless (exists $args{'list'}) {
      croak("Missing the required parameter 'list' when calling add_post");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling add_post");
    }

    # parse inputs
    my $_resource_path = '/Add';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'api_key'}) {
        $header_params->{'APIKey'} = $self->{api_client}->to_header_value($args{'api_key'});
    }

    # header params
    if ( exists $args{'access_token'}) {
        $header_params->{'AccessToken'} = $self->{api_client}->to_header_value($args{'access_token'});
    }

    # header params
    if ( exists $args{'list'}) {
        $header_params->{'List'} = $self->{api_client}->to_header_value($args{'list'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AddResponse', $response);
    return $_response_object;
}

#
# list_post
#
# It's used for listing a data added before.
# 
# @param string $api_key Your Switch API Key. (required)
# @param string $access_token Your Access Token. (required)
# @param string $list Your data list name. (required)
# @param Body $body Your Switch DB Query. (required)
{
    my $params = {
    'api_key' => {
        data_type => 'string',
        description => 'Your Switch API Key.',
        required => '1',
    },
    'access_token' => {
        data_type => 'string',
        description => 'Your Access Token.',
        required => '1',
    },
    'list' => {
        data_type => 'string',
        description => 'Your data list name.',
        required => '1',
    },
    'body' => {
        data_type => 'Body',
        description => 'Your Switch DB Query.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_post' } = { 
    	summary => 'It&#39;s used for listing a data added before.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub list_post {
    my ($self, %args) = @_;

    # verify the required parameter 'api_key' is set
    unless (exists $args{'api_key'}) {
      croak("Missing the required parameter 'api_key' when calling list_post");
    }

    # verify the required parameter 'access_token' is set
    unless (exists $args{'access_token'}) {
      croak("Missing the required parameter 'access_token' when calling list_post");
    }

    # verify the required parameter 'list' is set
    unless (exists $args{'list'}) {
      croak("Missing the required parameter 'list' when calling list_post");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling list_post");
    }

    # parse inputs
    my $_resource_path = '/List';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'api_key'}) {
        $header_params->{'APIKey'} = $self->{api_client}->to_header_value($args{'api_key'});
    }

    # header params
    if ( exists $args{'access_token'}) {
        $header_params->{'AccessToken'} = $self->{api_client}->to_header_value($args{'access_token'});
    }

    # header params
    if ( exists $args{'list'}) {
        $header_params->{'List'} = $self->{api_client}->to_header_value($args{'list'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# set_delete
#
# It's used for deleting a data added before at Switch DB.
# 
# @param string $api_key Your Switch API Key. (required)
# @param string $access_token Your Access Token. (required)
# @param string $list Your data list name. (required)
# @param string $list_item_id Your list item id. (required)
{
    my $params = {
    'api_key' => {
        data_type => 'string',
        description => 'Your Switch API Key.',
        required => '1',
    },
    'access_token' => {
        data_type => 'string',
        description => 'Your Access Token.',
        required => '1',
    },
    'list' => {
        data_type => 'string',
        description => 'Your data list name.',
        required => '1',
    },
    'list_item_id' => {
        data_type => 'string',
        description => 'Your list item id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_delete' } = { 
    	summary => 'It&#39;s used for deleting a data added before at Switch DB.',
        params => $params,
        returns => 'SetResponse',
        };
}
# @return SetResponse
#
sub set_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'api_key' is set
    unless (exists $args{'api_key'}) {
      croak("Missing the required parameter 'api_key' when calling set_delete");
    }

    # verify the required parameter 'access_token' is set
    unless (exists $args{'access_token'}) {
      croak("Missing the required parameter 'access_token' when calling set_delete");
    }

    # verify the required parameter 'list' is set
    unless (exists $args{'list'}) {
      croak("Missing the required parameter 'list' when calling set_delete");
    }

    # verify the required parameter 'list_item_id' is set
    unless (exists $args{'list_item_id'}) {
      croak("Missing the required parameter 'list_item_id' when calling set_delete");
    }

    # parse inputs
    my $_resource_path = '/Set';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'api_key'}) {
        $header_params->{'APIKey'} = $self->{api_client}->to_header_value($args{'api_key'});
    }

    # header params
    if ( exists $args{'access_token'}) {
        $header_params->{'AccessToken'} = $self->{api_client}->to_header_value($args{'access_token'});
    }

    # header params
    if ( exists $args{'list'}) {
        $header_params->{'List'} = $self->{api_client}->to_header_value($args{'list'});
    }

    # header params
    if ( exists $args{'list_item_id'}) {
        $header_params->{'ListItemId'} = $self->{api_client}->to_header_value($args{'list_item_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SetResponse', $response);
    return $_response_object;
}

#
# set_post
#
# It's used for updating a data object that is already added to Switch DB.
# 
# @param string $api_key Your Switch API Key. (required)
# @param string $access_token Your Access Token. (required)
# @param string $list Your data list name. (required)
# @param string $list_item_id Your list item id. (required)
# @param string $body Your new value JSON. (required)
{
    my $params = {
    'api_key' => {
        data_type => 'string',
        description => 'Your Switch API Key.',
        required => '1',
    },
    'access_token' => {
        data_type => 'string',
        description => 'Your Access Token.',
        required => '1',
    },
    'list' => {
        data_type => 'string',
        description => 'Your data list name.',
        required => '1',
    },
    'list_item_id' => {
        data_type => 'string',
        description => 'Your list item id.',
        required => '1',
    },
    'body' => {
        data_type => 'string',
        description => 'Your new value JSON.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_post' } = { 
    	summary => 'It&#39;s used for updating a data object that is already added to Switch DB.',
        params => $params,
        returns => 'SetResponse',
        };
}
# @return SetResponse
#
sub set_post {
    my ($self, %args) = @_;

    # verify the required parameter 'api_key' is set
    unless (exists $args{'api_key'}) {
      croak("Missing the required parameter 'api_key' when calling set_post");
    }

    # verify the required parameter 'access_token' is set
    unless (exists $args{'access_token'}) {
      croak("Missing the required parameter 'access_token' when calling set_post");
    }

    # verify the required parameter 'list' is set
    unless (exists $args{'list'}) {
      croak("Missing the required parameter 'list' when calling set_post");
    }

    # verify the required parameter 'list_item_id' is set
    unless (exists $args{'list_item_id'}) {
      croak("Missing the required parameter 'list_item_id' when calling set_post");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling set_post");
    }

    # parse inputs
    my $_resource_path = '/Set';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'api_key'}) {
        $header_params->{'APIKey'} = $self->{api_client}->to_header_value($args{'api_key'});
    }

    # header params
    if ( exists $args{'access_token'}) {
        $header_params->{'AccessToken'} = $self->{api_client}->to_header_value($args{'access_token'});
    }

    # header params
    if ( exists $args{'list'}) {
        $header_params->{'List'} = $self->{api_client}->to_header_value($args{'list'});
    }

    # header params
    if ( exists $args{'list_item_id'}) {
        $header_params->{'ListItemId'} = $self->{api_client}->to_header_value($args{'list_item_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SetResponse', $response);
    return $_response_object;
}

1;
