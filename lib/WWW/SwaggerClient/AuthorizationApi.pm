=begin comment

Switch Database REST API

Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.

OpenAPI spec version: 1.2.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::AuthorizationApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# token_get
#
# Generate Access Token
# 
# @param string $api_key Your Switch API Key. (required)
# @param string $signature Signature parameter is generated as md5(APISecret + ExpireTimestamp) format. (required)
# @param int $expire Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information. (required)
{
    my $params = {
    'api_key' => {
        data_type => 'string',
        description => 'Your Switch API Key.',
        required => '1',
    },
    'signature' => {
        data_type => 'string',
        description => 'Signature parameter is generated as md5(APISecret + ExpireTimestamp) format.',
        required => '1',
    },
    'expire' => {
        data_type => 'int',
        description => 'Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'token_get' } = { 
    	summary => 'Generate Access Token',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub token_get {
    my ($self, %args) = @_;

    # verify the required parameter 'api_key' is set
    unless (exists $args{'api_key'}) {
      croak("Missing the required parameter 'api_key' when calling token_get");
    }

    # verify the required parameter 'signature' is set
    unless (exists $args{'signature'}) {
      croak("Missing the required parameter 'signature' when calling token_get");
    }

    # verify the required parameter 'expire' is set
    unless (exists $args{'expire'}) {
      croak("Missing the required parameter 'expire' when calling token_get");
    }

    # parse inputs
    my $_resource_path = '/Token';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'api_key'}) {
        $header_params->{'APIKey'} = $self->{api_client}->to_header_value($args{'api_key'});
    }

    # header params
    if ( exists $args{'signature'}) {
        $header_params->{'Signature'} = $self->{api_client}->to_header_value($args{'signature'});
    }

    # header params
    if ( exists $args{'expire'}) {
        $header_params->{'Expire'} = $self->{api_client}->to_header_value($args{'expire'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
